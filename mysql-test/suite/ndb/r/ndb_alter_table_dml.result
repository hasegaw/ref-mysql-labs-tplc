call mtr.add_suppression(".*NDB_SHARE.*Moving away for safety, but possible memleak");
use test;
create table parent(a int primary key, b int, key(b)) engine=ndb;
create table child(a int primary key, b int) engine=ndb;
insert into parent values (1,1), (2,2), (3,3), (4,4);
insert into parent select a+4, b+4 from parent;
insert into parent select a+8, b+8 from parent;
insert into parent select a+16, b+16 from parent;
insert into parent select a+32, b+32 from parent;
insert into parent select a+64, b+64 from parent;
insert into parent select a+128, b+128 from parent;
insert into parent select a+256, b+256 from parent;
insert into parent select a+512, b+512 from parent;
insert into parent select a+1024, b+1024 from parent;
insert into parent select a+2048, b+2048 from parent;
insert into parent select a+4096, b+4096 from parent;
insert into child select * from parent;
set ndb_join_pushdown = false;
explain
select count(*)
from parent join child
on (parent.b = child.a)
where parent.b > 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	parent	range	b	b	5	NULL	819	Using where with pushed condition; Using MRR
1	SIMPLE	child	eq_ref	PRIMARY	PRIMARY	4	test.parent.b	1	NULL
Starting engines...
call queryload(10);
call queryload(10);
call queryload(10);
call queryload(10);
Beginning alter table child  partition by key(a) partitions 4;
alter table child  partition by key(a) partitions 4;
Completed.
Ending test. Droping table parent
drop table parent;
drop table child;
drop procedure queryload;
